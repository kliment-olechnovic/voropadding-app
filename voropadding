#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voropadding' script pads (fills up the space around) the selected part of the input molecule (e.g. a ligand)
and then calculates the total available volume and the total interface area of the padded part.

Options:
    --input-complex               string     input file path for a complex molecule (in PDB or mmCIF format), or '_list' to read paths from stdin
    --selection                   string     for complex input, selection of the structural part to pad and analyze, default is '(not [-protein])'
    --input-receptor              string     input file path for receptor, must be in PDB or mmCIF format
    --input-ligand                string     input file path for ligand, must be in SDF format
    --max-padding                 number     maximum number of padding layers, default is 2
    --restriction-centers         string     for complex input, selection of the atoms to be used as centers of the restriction spheres, default is ''
    --restriction-radius          number     for complex input, radius to be used for the restriction spheres (if any), default is 10.0
    --output-table-file           string     output table file path, default is '_stdout' to print to stdout
    --output-graphics-file        string     output file path for the PyMol drawing script, default is ''
    --output-padding-file         string     output file path for a table of the annotated padding points table, default is ''
    --output-padding-draw-file    string     output file path for the padding drawing script for PyMol, default is ''
    --graphics-mode               string     graphics output mode, may be 'basic' or 'detailed', default is 'basic'
    --print-mode                  string     printing to stdout mode, can be 'h' or 'v', default is 'h'
    --processors                  number     maximum number of processors to run in parallel, default is 1
    --only-padding-table                     flag to only output a table of the annotated padding points
    --help | -h                              flag to display help message and exit

Standard output:
    space-separated table of values

Examples:

    voropadding --input-complex "./complex.pdb"

    voropadding --input-complex "./complex.pdb" --selection '[-chain B]' 

    voropadding --input-complex "./complex.pdb" --restriction-centers '[-chain A -rnum 30 -aname CB]' --restriction-radius 12.0

    voropadding --input-complex "./complex.pdb" --max-padding 3 --output-graphics-file "./padded.py"

    find ./models/ -type f -name '*.pdb' | ./voropadding --input-complex _list --processors 4 --output-table-file ./table.txt

EOF
exit 1
}

################################################################################

export LANG=C
export LC_ALL=C

SCRIPTDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

readonly ZEROARG=$0
ALLARGS=("$@")

if [ -z "$1" ]
then
	print_help_and_exit
fi

INPUT_COMPLEX=""
SELECTION=""
INPUT_RECEPTOR=""
INPUT_LIGAND=""
MAX_PADDING="2"
RESTRICTION_CENTERS=""
RESTRICTION_RADIUS=""
OUTPUT_TABLE_FILE="_stdout"
OUTPUT_GRAPHICS_FILE=""
OUTPUT_PADDING_FILE=""
OUTPUT_PADDING_DRAW_FILE=""
GRAPHICS_MODE="basic"
PRINT_MODE="h"
MAX_PROCESSORS="1"
ONLY_PADDING_TABLE="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--input-complex)
		INPUT_COMPLEX="$OPTARG"
		shift
		;;
	--selection)
		SELECTION="$OPTARG"
		shift
		;;
	--input-receptor)
		INPUT_RECEPTOR="$OPTARG"
		shift
		;;
	--input-ligand)
		INPUT_LIGAND="$OPTARG"
		shift
		;;
	--max-padding)
		MAX_PADDING="$OPTARG"
		shift
		;;
	--restriction-centers)
		RESTRICTION_CENTERS="$OPTARG"
		shift
		;;
	--restriction-radius)
		RESTRICTION_RADIUS="$OPTARG"
		shift
		;;
	--output-table-file)
		OUTPUT_TABLE_FILE="$OPTARG"
		shift
		;;
	--output-graphics-file)
		OUTPUT_GRAPHICS_FILE="$OPTARG"
		shift
		;;
	--output-padding-file)
		OUTPUT_PADDING_FILE="$OPTARG"
		shift
		;;
	--output-padding-draw-file)
		OUTPUT_PADDING_DRAW_FILE="$OPTARG"
		shift
		;;
	--graphics-mode)
		GRAPHICS_MODE="$OPTARG"
		shift
		;;
	--print-mode)
		PRINT_MODE="$OPTARG"
		shift
		;;
	--processors)
		MAX_PROCESSORS="$OPTARG"
		shift
		;;
	--only-padding-table)
		ONLY_PADDING_TABLE="true"
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$INPUT_COMPLEX" ] && [ -z "$INPUT_RECEPTOR" ] && [ -z "$INPUT_LIGAND" ]
then
	echo >&2 "Error: no input provided"
	exit 1
fi

if [ -n "$INPUT_COMPLEX" ]
then
	if [ -n "$INPUT_RECEPTOR" ] || [ -n "$INPUT_LIGAND" ]
	then
		echo >&2 "Error: conflict with input arguments, both complex and receptor and/or ligand provided"
		exit 1
	fi
	
	if [ "$INPUT_COMPLEX" != "_list" ] && [ ! -s "$INPUT_COMPLEX" ]
	then
		echo >&2 "Error: no input complex file '$INPUT_COMPLEX'"
		exit 1
	fi
	
	if [ -z "$SELECTION" ]
	then
		SELECTION="(not [-protein])"
	fi
	
	if [ -z "$RESTRICTION_RADIUS" ]
	then
		RESTRICTION_RADIUS="10.0"
	fi
else
	if [ -z "$INPUT_RECEPTOR" ]
	then
		echo >&2 "Error: no input receptor file provided"
		exit 1
	fi
	
	if [ -z "$INPUT_LIGAND" ]
	then
		echo >&2 "Error: no input ligand file provided"
		exit 1
	fi
	
	if [ -n "$SELECTION" ]
	then
		echo >&2 "Error: conflict with input arguments, selection provided without the input complex"
		exit 1
	fi
	
	if [ -n "$RESTRICTION_CENTERS" ]
	then
		echo >&2 "Error: conflict with input arguments, restriction centers provided without the input complex"
		exit 1
	fi
	
	if [ -n "$RESTRICTION_RADIUS" ]
	then
		echo >&2 "Error: conflict with input arguments, restriction radius provided without the input complex"
		exit 1
	fi
	
	if [ ! -s "$INPUT_RECEPTOR" ]
	then
		echo >&2 "Error: no input receptor file '$INPUT_RECEPTOR'"
		exit 1
	fi
	
	if [ ! -s "$INPUT_LIGAND" ]
	then
		echo >&2 "Error: no input ligand file '$INPUT_LIGAND'"
		exit 1
	fi
fi

if [ -z "$MAX_PADDING" ] || [ "$MAX_PADDING" -lt "1" ] || [ "$MAX_PADDING" -gt "10" ]
then
	echo >&2 "Error: invalid value '$MAX_PADDING' for the maximum number of padding layers, must be an integer between 1 and 10"
	exit 1
fi

if [ "$GRAPHICS_MODE" != "basic" ] && [ "$GRAPHICS_MODE" != "detailed" ]
then
	echo >&2 "Error: invalid graphics mode, must be either 'basic' or 'detailed'"
	exit 1
fi

if [ "$PRINT_MODE" != "h" ] && [ "$PRINT_MODE" != "v" ]
then
	echo >&2 "Error: invalid printing mode '$PRINT_MODE', must be 'h' or 'v'"
	exit 1
fi

if [ -n "$OUTPUT_PADDING_DRAW_FILE" ] && [ -z "$OUTPUT_PADDING_FILE" ]
then
	echo >&2 "Error: padding drawing output file specified without specifying the padding table output file"
	exit 1
fi

if [ "$ONLY_PADDING_TABLE" == "true" ] && [ -z "$OUTPUT_PADDING_FILE" ]
then
	echo >&2 "Error: conflict with input arguments, the flag to only output a padding table is enabled without providing the padding table output file path"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

################################################################################

if [ "$INPUT_COMPLEX" == "_list" ]
then
	cat | grep -E . | sort | uniq > "$TMPLDIR/input_list"
	
	if [ ! -s "$TMPLDIR/input_list" ]
	then
		echo >&2 "Error: no stdin data"
		exit 1
	fi
	
	mkdir -p "$TMPLDIR/children_tables"
	
	cat "$TMPLDIR/input_list" \
	| awk -v outdir="$TMPLDIR/children_tables" '{print "--input-complex " $1 " --output-table-file " outdir "/" NR ".txt"}' \
	| xargs -L 1 -P "$MAX_PROCESSORS" "$ZEROARG" "${ALLARGS[@]}" --print-mode v --processors 1
	
	find "$TMPLDIR/children_tables" -type f -not -empty \
	| sort \
	| xargs -L 1 cat \
	| awk '{if(NR==1 || $1!="input_complex") print $0}' \
	| ${SCRIPTDIR}/tools/voronota-js --no-setup-defaults "js:voronota_tournament_sort('-input-file _stdin -output-file _stdout -columns volume_freedom_coef -multipliers 1 -tolerances 0.0');" \
	| column -t \
	> "$TMPLDIR/full_output_table"
	
	if [ -n "$OUTPUT_TABLE_FILE" ] && [ "$OUTPUT_TABLE_FILE" != "_stdout" ]
	then
		mkdir -p "$(dirname "$OUTPUT_TABLE_FILE")"
		cat "$TMPLDIR/full_output_table" > "$OUTPUT_TABLE_FILE"
	else
		cat "$TMPLDIR/full_output_table"
	fi
	
	exit 0
fi

################################################################################

if [ -n "$INPUT_COMPLEX" ]
then
	cat "$INPUT_COMPLEX" > "${TMPLDIR}/rawinput"
	
	cd "$TMPLDIR"

	{
cat << EOF
var params={}
params.selection='$SELECTION';
params.restriction_selection='$RESTRICTION_CENTERS';
EOF

cat << 'EOF'
voronota_setup_defaults("-no-load-voromqa-potentials", "-no-load-more-atom-types", "-no-load-mock-voromqa-potential");
EOF

		if [[ "$INPUT_COMPLEX" == *.cif ]] || [[ "$INPUT_COMPLEX" == *.CIF ]]
		then
cat << 'EOF'
voronota_import_mmcif("-files", ["./rawinput"], "-include-heteroatoms");
voronota_assert_full_success("Failed to input mmCIF file");
EOF
		else
cat << 'EOF'
voronota_import("-file", "./rawinput", "-include-heteroatoms");
voronota_assert_full_success("Failed to input PDB file");
EOF
		fi

cat << 'EOF'
voronota_delete_tags_of_atoms("-tags", "het");
voronota_export_atoms("-use", "("+params.selection+")", "-file", "ligand.pa");
voronota_assert_full_success("Failed to write selection");
voronota_export_atoms("-use", "(not ("+params.selection+"))", "-file", "receptor.pa");
voronota_assert_full_success("Failed to write selection complementary");
if(params.restriction_selection)
{
	voronota_export_atoms("-use", "("+params.restriction_selection+")", "-file", "restriction.pa");
	voronota_assert_full_success("Failed to write restriction");
}
EOF
	} \
	| ${SCRIPTDIR}/tools/voronota-js --no-setup-defaults

	if [ ! -s "ligand.pa" ]
	then
		echo >&2 "Error: failed to select atoms from '${INPUT_COMPLEX}' using selection '${SELECTION}'"
		exit 1
	fi
	
	if [ ! -s "receptor.pa" ]
	then
		echo >&2 "Error: failed to select atoms from '${INPUT_COMPLEX}' using selection '(not (${SELECTION}))'"
		exit 1
	fi
	
	if [ -n "$RESTRICTION_CENTERS" ] && [ ! -s "restriction.pa" ]
	then
		echo >&2 "Error: failed to select restriction center atoms from '${INPUT_COMPLEX}' using selection '(not (${RESTRICTION_CENTERS}))'"
		exit 1
	fi
	
	{
		cat "receptor.pa" | awk '{print "receptor " $2 " " $3 " " $4 " " $5}'
		cat "ligand.pa" | awk '{print "ligand " $2 " " $3 " " $4 " " $5}'
	} \
	> "./inputballs"
else
	cat "$INPUT_RECEPTOR" > "${TMPLDIR}/rawreceptor"
	cat "$INPUT_LIGAND" > "${TMPLDIR}/rawligand"
	
	cd "$TMPLDIR"
	
	cat "./rawligand" | head -4 | tail -1 | 

	{
cat << 'EOF'
voronota_setup_defaults("-no-load-voromqa-potentials", "-no-load-more-atom-types", "-no-load-mock-voromqa-potential");
EOF

		if [[ "$INPUT_COMPLEX" == *.cif ]] || [[ "$INPUT_COMPLEX" == *.CIF ]]
		then
cat << 'EOF'
voronota_import_mmcif("-files", ["./rawreceptor"], "-include-heteroatoms");
voronota_assert_full_success("Failed to input mmCIF file");
EOF
		else
cat << 'EOF'
voronota_import("-file", "./rawreceptor", "-include-heteroatoms");
voronota_assert_full_success("Failed to input PDB file");
EOF
		fi

cat << 'EOF'
voronota_delete_tags_of_atoms("-tags", "het");
voronota_export_atoms("-file", "receptor.pa");
EOF
	} \
	| ${SCRIPTDIR}/tools/voronota-js --no-setup-defaults
	
	if [ ! -s "receptor.pa" ]
	then
		echo >&2 "Error: failed to process the input receptor file '${INPUT_RECEPTOR}'"
		exit 1
	fi
	
	cat "./rawligand" \
	| awk 'c==0 && /V2000/ { c = int(substr($0,1,3)); next } c>0 { print "ligand " $1 " " $2 " " $3 " 1.7"; if (++i==c) exit }' \
	> ./ligandballs
	
	if [ ! -s "ligandballs" ]
	then
		echo >&2 "Error: failed to process the input ligand file '${INPUT_LIGAND}'"
		exit 1
	fi
	
	{
		cat "receptor.pa" | awk '{print "receptor " $2 " " $3 " " $4 " " $5}'
		cat "ligandballs" | awk '{print "ligand " $2 " " $3 " " $4 " " $5}'
	} \
	> "./inputballs"
fi

if [ ! -s "inputballs" ]
then
	echo >&2 "Error: failed to process the input atoms"
	exit 1
fi

################################################################################

PARAMS_FOR_BOUNDING_SPHERES=""

if [ -s "restriction.pa" ]
then
	cat "restriction.pa" | awk -v radius=${RESTRICTION_RADIUS} '{print $2 " " $3 " " $4 " " radius}' | tr '\n' ' ' > "./restriction_spheres"
	PARAMS_FOR_BOUNDING_SPHERES="--bound-by-spheres $(cat './restriction_spheres')"
fi

if [ -n "$OUTPUT_PADDING_FILE" ]
then
	cat "./inputballs" \
	| ${SCRIPTDIR}/tools/sihsolvexpand ${PARAMS_FOR_BOUNDING_SPHERES} \
	  --chain-of-interest "ligand" \
	  --max-layers "$MAX_PADDING" \
	  --calc-detailed-volumes \
	2> /dev/null \
	> "./padded_complex"
	
	{
		echo "category padding_layer root_id x y z r volume"
		
		cat "./padded_complex" \
		| awk '{if($1=="ligand"){print "layer" $6 " " $7 " " $2 " " $3 " " $4 " " $9 " " $8}}' \
		| sed 's/^layer0/ligand 0/' \
		| sed 's/^layer/padding /'
		
		cat "./padded_complex" \
		| awk '{if($1=="cap"){print "cap " $6 " " $7 " " $2 " " $3 " " $4 " " $9 " 0"}}'
	} \
	| sed 's/\s\+/\t/g' \
	> "./padding_table.tsv"
	
	if [ ! -s "padding_table.tsv" ]
	then
		echo >&2 "Error: failed to generate a padding table"
		exit 1
	fi
	
	if [ -n "$OUTPUT_PADDING_FILE" ]
	then
		cd - &> /dev/null
		
		mkdir -p "$(dirname ${OUTPUT_PADDING_FILE})"
		cp "${TMPLDIR}/padding_table.tsv" "$OUTPUT_PADDING_FILE"
		
		cd "$TMPLDIR"
	fi
	
	if [ "$ONLY_PADDING_TABLE" == "true" ]
	then
		exit 0
	fi
	
	if [ -n "$OUTPUT_PADDING_DRAW_FILE" ]
	then
		PADDING_DRAW_BASENAME="$(basename ${OUTPUT_PADDING_DRAW_FILE} .py | tr '.' '_')"
		
		cat "./padding_table.tsv" | tail -n +2 | awk '{print $1 " " $2}' | sort | uniq | sort -n -k2,2 > "./padding_draw_unique_layers"
		cat "./padding_table.tsv" | tail -n +2 | awk '{print $3}' | sort | uniq > "./padding_draw_unique_root_ids"
		
		{
			echo 'from pymol.cgo import *'
			echo 'from pymol import cmd'
			cat "./padding_draw_unique_layers" \
			| while read -r PD_NAME PD_LAYER
			do
				echo "cgo_${PD_NAME}_layer_${PD_LAYER} = ["
				cat "./padding_draw_unique_root_ids" \
				| while read -r PD_ROOTID
				do
					cat "./padding_table.tsv" \
					| awk -v pdl=${PD_LAYER} -v pdrid=${PD_ROOTID} '{if($2==pdl && $3==pdrid){print "SPHERE, ", $4 ", " $5 ", " $6 ", " $7 ","}}' \
					> "./padding_draw_sub_${PD_LAYER}_${PD_ROOTID}"

					if [ -s "./padding_draw_sub_${PD_LAYER}_${PD_ROOTID}" ]
					then
						awk -v s=${PD_ROOTID} 'BEGIN{srand(s); print "COLOR, " rand() ", " rand() ", " rand() ","}'
						[ "$PD_NAME" == "ligand" ] && echo "ALPHA, 1.0,"
						[ "$PD_NAME" == "padding" ] && echo "ALPHA, 1.0,"
						[ "$PD_NAME" == "cap" ] && echo "ALPHA, 0.5,"
						cat "./padding_draw_sub_${PD_LAYER}_${PD_ROOTID}"
					fi
				done
				echo "]"
				echo "cmd.load_cgo(cgo_${PD_NAME}_layer_${PD_LAYER}, '${PADDING_DRAW_BASENAME}__${PD_NAME}_layer_${PD_LAYER}')"
				echo "cmd.do('group cg_${PADDING_DRAW_BASENAME}, ${PADDING_DRAW_BASENAME}__*')"
				echo "cmd.do('zoom')"
			done
		} \
		> "./padding_draw.py"
	fi
	
	if [ -n "$OUTPUT_PADDING_DRAW_FILE" ]
	then
		cd - &> /dev/null
		
		mkdir -p "$(dirname ${OUTPUT_PADDING_DRAW_FILE})"
		cp "${TMPLDIR}/padding_draw.py" "$OUTPUT_PADDING_DRAW_FILE"
		
		cd "$TMPLDIR"
	fi
else
	cat "./inputballs" \
	| ${SCRIPTDIR}/tools/sihsolvexpand ${PARAMS_FOR_BOUNDING_SPHERES} \
	  --chain-of-interest "ligand" \
	  --max-layers "$MAX_PADDING" \
	2> /dev/null \
	> "./padded_complex"
fi

if [ ! -s "padded_complex" ]
then
	echo >&2 "Error: failed to generate a padded structure"
	exit 1
fi

################################################################################

GRAPHICS_PARAMETERS_INVDW=""
GRAPHICS_PARAMETERS_INSAS=""
GRAPHICS_PARAMETERS_PADDED=""
if [ -n "$OUTPUT_GRAPHICS_FILE" ]
then
	GRAPHICS_BASENAME="$(basename ${OUTPUT_GRAPHICS_FILE} .py | tr '.' '_')"
	GRAPHICS_PARAMETERS_INVDW="--graphics-output-file ./draw_invdw.py --graphics-title ${GRAPHICS_BASENAME}_vdW --graphics-restrict-representations balls --graphics-restrict-chains ligand --graphics-color-balls 0x00FFFF"
	GRAPHICS_PARAMETERS_INSAS="--graphics-output-file ./draw_insas.py --graphics-title ${GRAPHICS_BASENAME}_in_SAS --graphics-restrict-representations wireframe faces --graphics-restrict-chain-pairs receptor ligand --graphics-color-faces 0x00FF00 --graphics-color-wireframe 0x007777"
	GRAPHICS_PARAMETERS_PADDED="--graphics-output-file ./draw_padded.py --graphics-title ${GRAPHICS_BASENAME}_padded --graphics-restrict-representations wireframe faces --graphics-restrict-chain-pairs receptor ligand cap ligand --graphics-color-faces 0xFFFF00 --graphics-color-wireframe 0x777777"
fi

################################################################################

cat "./inputballs" \
| ${SCRIPTDIR}/tools/voronota-lt ${GRAPHICS_PARAMETERS_INVDW} \
  --probe 0.001 \
  --print-contacts-chain-level \
  --print-cells-chain-level \
2> /dev/null \
> "./tessellation_summary_invdw"

if [ ! -s "tessellation_summary_invdw" ]
then
	echo >&2 "Error: failed to calculate tessellation summary constrained by the van der Waals surface"
	exit 1
fi

cat "./inputballs" \
| ${SCRIPTDIR}/tools/voronota-lt ${GRAPHICS_PARAMETERS_INSAS} \
  --probe 1.4 \
  --print-contacts-chain-level \
  --print-cells-chain-level \
2> /dev/null \
> "./tessellation_summary_insas"

if [ ! -s "tessellation_summary_insas" ]
then
	echo >&2 "Error: failed to calculate basic tessellation summary constrained by the SAS"
	exit 1
fi

cat "./padded_complex" \
| awk '{print $1 " " $2 " " $3 " " $4 " " $5}' \
| ${SCRIPTDIR}/tools/voronota-lt ${GRAPHICS_PARAMETERS_PADDED} \
  --print-contacts-chain-level \
  --print-cells-chain-level \
2> /dev/null \
> "./tessellation_summary_padded"

if [ ! -s "tessellation_summary_padded" ]
then
	echo >&2 "Error: failed to calculate tessellation summary"
	exit 1
fi

if [ -n "$OUTPUT_GRAPHICS_FILE" ] && [ ! -s "draw_padded.py" ]
then
	echo >&2 "Error: failed to generate graphics"
	exit 1
fi

read LIGAND_AREA_INVDW LIGAND_VOLUME_INVDW LIGAND_ATOMS_COUNT <<< "$(cat ./tessellation_summary_invdw | awk '{if($1=="su" && $2=="ligand"){print $5 " " $6 " " $7}}')"
read LIGAND_AREA_INSAS LIGAND_VOLUME_INSAS <<< "$(cat ./tessellation_summary_insas | awk '{if($1=="su" && $2=="ligand"){print $5 " " $6}}')"
read LIGAND_VOLUME_PADDED <<< "$(cat ./tessellation_summary_padded | awk '{if($1=="su" && $2=="ligand"){print $6}}')"

read LIGAND_IFACE_AREA_INSAS LIGAND_IFACE_BOUNDARY_INSAS <<< "$(cat ./tessellation_summary_insas | awk '{if($1=="cu" && (($2=="ligand" && $5=="receptor") || ($2=="receptor" && $5=="ligand"))){print $8 " " $9}}')"
read LIGAND_IFACE_AREA_PADDED LIGAND_IFACE_BOUNDARY_PADDED <<< "$(cat ./tessellation_summary_padded | awk '{if($1=="cu" && (($2=="ligand" && $5=="receptor") || ($2=="receptor" && $5=="ligand"))){print $8 " " $9}}')"

VOLUME_FREEDOM_COEF="$(echo ${LIGAND_VOLUME_PADDED} ${LIGAND_VOLUME_INVDW} | awk '{print ($1/$2)}')"
IFACE_FREEDOM_COEF="$(echo ${LIGAND_IFACE_AREA_PADDED} ${LIGAND_IFACE_AREA_INSAS} | awk '{print ($1/$2)}')"

HEADER_ROW_START="input"
CONTENT_ROW_START="unknown"

if [ -n "$INPUT_COMPLEX" ]
then
	HEADER_ROW_START="input_complex  restrictions"
	CONTENT_ROW_START="$(basename ${INPUT_COMPLEX})"
	if [ -s "restriction.pa" ]
	then
		CONTENT_ROW_START="${CONTENT_ROW_START}  $(cat 'restriction.pa' | wc -l)"
	else
		CONTENT_ROW_START="${CONTENT_ROW_START}  0"
	fi
else
	HEADER_ROW_START="input_receptor input_ligand"
	CONTENT_ROW_START="$(basename ${INPUT_RECEPTOR})  $(basename ${INPUT_LIGAND})"
fi

{
echo "${HEADER_ROW_START}  focus_atoms_count  max_padding  volume_freedom_coef  iface_freedom_coef  volume_padded  iface_area_padded  volume_unpadded  iface_area_unpadded  sasa_unpadded  volume_vdw"
echo "${CONTENT_ROW_START}  $LIGAND_ATOMS_COUNT  $MAX_PADDING  $VOLUME_FREEDOM_COEF  $IFACE_FREEDOM_COEF  $LIGAND_VOLUME_PADDED  $LIGAND_IFACE_AREA_PADDED  $LIGAND_VOLUME_INSAS  $LIGAND_IFACE_AREA_INSAS  $LIGAND_AREA_INSAS  $LIGAND_VOLUME_INVDW"
} \
| column -t \
> "./final_result.txt"

cd - &> /dev/null

if [ -n "$OUTPUT_TABLE_FILE" ] && [ "$OUTPUT_TABLE_FILE" != "_stdout" ]
then
	mkdir -p "$(dirname ${OUTPUT_TABLE_FILE})"
	cat "${TMPLDIR}/final_result.txt" > "$OUTPUT_TABLE_FILE"
else
	if [ "$PRINT_MODE" == "v" ]
	then
		paste \
		  <(cat "${TMPLDIR}/final_result.txt" | head -1 | sed 's/\s\+/\n/g') \
		  <(cat "${TMPLDIR}/final_result.txt" | tail -1 | sed 's/\s\+/\n/g') \
		| column -t
	else
		cat "${TMPLDIR}/final_result.txt"
	fi
fi

if [ -n "$OUTPUT_GRAPHICS_FILE" ]
then
	mkdir -p "$(dirname ${OUTPUT_GRAPHICS_FILE})"
	
	{
		if [ "$GRAPHICS_MODE" == "detailed" ]
		then
			cat "${TMPLDIR}/draw_invdw.py" "${TMPLDIR}/draw_insas.py" "${TMPLDIR}/draw_padded.py"
		else
			cat "${TMPLDIR}/draw_invdw.py" "${TMPLDIR}/draw_padded.py"
		fi
		
		echo "cmd.do('group cg_${GRAPHICS_BASENAME}, ${GRAPHICS_BASENAME}_*')"
	} \
	| grep -E -v '^cmd\.load_cgo\(cgo_graphics_list_faces_contacts_cap_ligand' \
	| sed 's/_vdW_balls_atoms_ligand/_vdW_balls/g' \
	| sed 's/_padded_faces_contacts_ligand_receptor/_padded_iface/g' \
	| sed 's/_padded_wireframe_contacts_cap_ligand/_padded_cap/g' \
	| sed 's/_padded_wireframe_contacts_ligand_receptor/_padded_wireframe/g' \
	| sed 's/_in_SAS_faces_contacts_ligand_receptor/_in_SAS_iface/g' \
	| sed 's/_in_SAS_wireframe_contacts_ligand_receptor/_in_SAS_wireframe/g' \
	> "$OUTPUT_GRAPHICS_FILE"
fi

